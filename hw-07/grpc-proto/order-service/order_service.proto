syntax = "proto3";

// Этот тип сообщения введен для простоты понимания API.
// В реальном приложении скорее всего бы использовался https://github.com/googleapis/googleapis/blob/master/google/type/money.proto
message Money {
  int64 unit = 1;
  int32 fractional = 2;
}

message PrepareOrderRequest {
  enum PaymentMethod {
    UNSPECIFIED = 0;
    CASH = 1;
    CARD= 2;
  }

  string passenger_id = 1; // Пассажир, который вызывает такси
  string pickup = 2; // Точка на карте, где нужно забрать Пассажира
  string destination = 3; // Точка на карте, куда нужно отвезти Пассажира
  string tariff_id = 4; // По какому тарифу везти
  repeated string options = 5; // Необходимые опции: детское автокресло, помощь инвалиду и т.п.
  PaymentMethod paymentMethod = 6;
}

message PrepareOrderResponse {
  string order_id = 1; // ID заказа
  string route = 2; // Маршрут для отображения на карте. "string" - это временный тип данных.
                    // Фактический тип данных должен быть выбран в зависимости от того, что принимает API картографического сервиса
  Money price = 3; // Стоимость поездки
}

message PlaceOrderRequest {
  string order_id = 1; // ID заказа, полученный в PrepareOrderResponse
}

message PlaceOrderResponse {
}

message ApplyOrderRequest {
  string order_id = 1; // ID принятого заказа
  string driver_id = 2; // ID Водителя, принявшего заказ
}

message ApplyOrderResponse {
}

message CancelOrderRequest {
  string order_id = 1;
  string comment = 2; // Необязательный комментарий. Виден Водителю.
}

message CancelOrderResponse {
}

message CompleteOrderReqest {
  string order_id = 1;
}

message CompleteOrderResponse {
}

message CloseOrderRequest {
  string order_id = 1;
  int32 rating = 2;
  string comment = 3;
}

message CloseOrderResponse {
}

message GetOrderStatusRequest {
  string order_id = 1;
}

message GetOrderStatusResponse {
  enum Status {
    UNSPECIFIED = 0;
    DRAFT = 1;
    PLACED = 2;
    APPLIED = 3;
    COMPLETED = 4;
    CLOSED = 5;
  }

  string route = 1; // Маршрут для отображения на карте.
  Money price = 2;
}

service OrderService {
  // Строит маршрут и вычисляет стоимость.
  // Вызывайте этот метод каждый раз когда Пассажир меняет какие-либо параметры заказа (пункт назначения, тариф и т.п.).
  // Стоимость может быть изменена ТОЛЬКО если этот метод был вызван повторно.
  rpc PrepareOrder(PrepareOrderRequest) returns (PrepareOrderResponse);
  // После вызова этого метода начинается поиск ближайшей машины.
  // Кроме того выполняется проверка работоспособности банковской карты.
  rpc PlaceOrder(PlaceOrderRequest) returns (PlaceOrderResponse);
  // Водитель принял заказ. После вызова этого метода поиск машины прекращается и Пассажир получает уведомление что машина в пути.
  rpc ApplyOrder(ApplyOrderRequest) returns (ApplyOrderResponse);
  // Пассажир отменил заказ.
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse);
  // Водитель сообщаяет что заказ выполнен.
  rpc CompleteOrder(CompleteOrderReqest) returns (CompleteOrderResponse);
  // Пассажир подтверждает что заказ выполнен. Вызов этого метода инициирует олату заказа.
  rpc CloseOrder(CloseOrderRequest) returns (CloseOrderResponse);
  // Получить состояние заказа. На основании этого состояния можно показать или скрыть элементы интерфейса.
  rpc GetOrderStatus(GetOrderStatusRequest) returns (GetOrderStatusResponse);
}
